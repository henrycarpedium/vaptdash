import { useState } from 'react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { Vulnerability } from '../../types';
import { getSeverityColor, formatCVSS } from '../../utils/severity';
import { format } from 'date-fns';
import { Eye, Edit, Trash2, ChevronUp, ChevronDown } from 'lucide-react';
import { useVaptStore } from '../../store/useVaptStore';
import { toast } from 'sonner@2.0.3';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '../ui/alert-dialog';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  onView: (vuln: Vulnerability) => void;
  onEdit: (vuln: Vulnerability) => void;
}

type SortField = 'name' | 'severity' | 'cvssScore' | 'discoveredDate' | 'status';
type SortDirection = 'asc' | 'desc';

export function VulnerabilityTable({ vulnerabilities, onView, onEdit }: VulnerabilityTableProps) {
  const { deleteVulnerability } = useVaptStore();
  const [sortField, setSortField] = useState<SortField>('discoveredDate');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [deleteId, setDeleteId] = useState<string | null>(null);

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    let aValue: any = a[sortField];
    let bValue: any = b[sortField];

    if (sortField === 'severity') {
      const severityOrder = { Critical: 4, High: 3, Medium: 2, Low: 1 };
      aValue = severityOrder[a.severity];
      bValue = severityOrder[b.severity];
    }

    if (sortField === 'discoveredDate') {
      aValue = a.discoveredDate.getTime();
      bValue = b.discoveredDate.getTime();
    }

    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });

  const SortIcon = ({ field }: { field: SortField }) => {
    if (sortField !== field) return null;
    return sortDirection === 'asc' ? (
      <ChevronUp className="h-4 w-4 inline ml-1" />
    ) : (
      <ChevronDown className="h-4 w-4 inline ml-1" />
    );
  };

  const handleDelete = () => {
    if (deleteId) {
      deleteVulnerability(deleteId);
      toast.success('Vulnerability deleted successfully');
      setDeleteId(null);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Open':
        return 'bg-red-100 text-red-800';
      case 'In Progress':
        return 'bg-yellow-100 text-yellow-800';
      case 'Resolved':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  if (sortedVulnerabilities.length === 0) {
    return (
      <div className="text-center py-12 text-muted-foreground">
        No vulnerabilities found matching the current filters.
      </div>
    );
  }

  return (
    <>
      <div className="border rounded-lg overflow-hidden">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead
                className="cursor-pointer hover:bg-muted/50"
                onClick={() => handleSort('name')}
              >
                Name <SortIcon field="name" />
              </TableHead>
              <TableHead
                className="cursor-pointer hover:bg-muted/50"
                onClick={() => handleSort('severity')}
              >
                Severity <SortIcon field="severity" />
              </TableHead>
              <TableHead
                className="cursor-pointer hover:bg-muted/50"
                onClick={() => handleSort('cvssScore')}
              >
                CVSS <SortIcon field="cvssScore" />
              </TableHead>
              <TableHead
                className="cursor-pointer hover:bg-muted/50"
                onClick={() => handleSort('status')}
              >
                Status <SortIcon field="status" />
              </TableHead>
              <TableHead>Target URL</TableHead>
              <TableHead
                className="cursor-pointer hover:bg-muted/50"
                onClick={() => handleSort('discoveredDate')}
              >
                Discovered <SortIcon field="discoveredDate" />
              </TableHead>
              <TableHead className="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {sortedVulnerabilities.map((vuln) => (
              <TableRow key={vuln.id}>
                <TableCell className="max-w-xs truncate">{vuln.name}</TableCell>
                <TableCell>
                  <Badge className={getSeverityColor(vuln.severity)}>{vuln.severity}</Badge>
                </TableCell>
                <TableCell>{formatCVSS(vuln.cvssScore)}</TableCell>
                <TableCell>
                  <Badge variant="outline" className={getStatusColor(vuln.status)}>
                    {vuln.status}
                  </Badge>
                </TableCell>
                <TableCell className="max-w-xs truncate">
                  <a
                    href={vuln.targetUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-blue-600 hover:underline"
                  >
                    {vuln.targetUrl}
                  </a>
                </TableCell>
                <TableCell>{format(vuln.discoveredDate, 'MMM dd, yyyy')}</TableCell>
                <TableCell className="text-right">
                  <div className="flex justify-end gap-2">
                    <Button variant="ghost" size="icon" onClick={() => onView(vuln)}>
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button variant="ghost" size="icon" onClick={() => onEdit(vuln)}>
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => setDeleteId(vuln.id)}
                      className="text-destructive hover:text-destructive"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>

      <AlertDialog open={deleteId !== null} onOpenChange={() => setDeleteId(null)}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Vulnerability</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this vulnerability? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction onClick={handleDelete} className="bg-destructive text-destructive-foreground">
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}
