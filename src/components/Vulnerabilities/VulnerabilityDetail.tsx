import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../ui/dialog';
import { Badge } from '../ui/badge';
import { Button } from '../ui/button';
import { Vulnerability } from '../../types';
import { getSeverityColor, formatCVSS } from '../../utils/severity';
import { format } from 'date-fns';
import { ExternalLink, Calendar, Shield } from 'lucide-react';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '../ui/carousel';
import { Card, CardContent } from '../ui/card';

interface VulnerabilityDetailProps {
  vulnerability: Vulnerability | null;
  open: boolean;
  onClose: () => void;
}

export function VulnerabilityDetail({ vulnerability, open, onClose }: VulnerabilityDetailProps) {
  if (!vulnerability) return null;

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-start justify-between gap-4">
            <span className="flex-1">{vulnerability.name}</span>
            <Badge className={getSeverityColor(vulnerability.severity)}>
              {vulnerability.severity}
            </Badge>
          </DialogTitle>
          <DialogDescription>
            View detailed information about this vulnerability including impact, proof of concept, and remediation steps.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Metadata */}
          <div className="grid grid-cols-2 md:grid-cols-3 gap-4 p-4 bg-muted/50 rounded-lg">
            <div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground mb-1">
                <Shield className="h-4 w-4" />
                CVSS Score
              </div>
              <div className="text-lg">{formatCVSS(vulnerability.cvssScore)}</div>
            </div>
            <div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground mb-1">
                <Calendar className="h-4 w-4" />
                Discovered
              </div>
              <div>{format(vulnerability.discoveredDate, 'MMM dd, yyyy')}</div>
            </div>
            <div>
              <div className="text-sm text-muted-foreground mb-1">Status</div>
              <Badge variant="outline">{vulnerability.status}</Badge>
            </div>
          </div>

          {/* Target URL */}
          <div>
            <h3 className="mb-2">Target URL</h3>
            <a
              href={vulnerability.targetUrl}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-600 hover:underline flex items-center gap-2"
            >
              {vulnerability.targetUrl}
              <ExternalLink className="h-4 w-4" />
            </a>
          </div>

          {/* Description */}
          <div>
            <h3 className="mb-2">Description</h3>
            <p className="text-muted-foreground">{vulnerability.description}</p>
          </div>

          {/* Impact */}
          <div>
            <h3 className="mb-2">Impact</h3>
            <p className="text-muted-foreground">{vulnerability.impact}</p>
          </div>

          {/* Proof of Concept */}
          {vulnerability.pocSteps.length > 0 && (
            <div>
              <h3 className="mb-4">Proof of Concept</h3>
              <Carousel className="w-full">
                <CarouselContent>
                  {vulnerability.pocSteps.map((step, index) => (
                    <CarouselItem key={step.id}>
                      <Card>
                        <CardContent className="p-6">
                          <div className="mb-2 flex items-center gap-2">
                            <span className="bg-primary text-primary-foreground rounded-full w-8 h-8 flex items-center justify-center">
                              {index + 1}
                            </span>
                            <h4>{step.title}</h4>
                          </div>
                          <p className="text-muted-foreground mb-4">{step.description}</p>
                          {step.images.length > 0 && (
                            <div className="grid grid-cols-1 gap-2">
                              {step.images.map((img, imgIndex) => (
                                <img
                                  key={imgIndex}
                                  src={img}
                                  alt={`Step ${index + 1} screenshot`}
                                  className="rounded-lg border"
                                />
                              ))}
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </CarouselItem>
                  ))}
                </CarouselContent>
                {vulnerability.pocSteps.length > 1 && (
                  <>
                    <CarouselPrevious />
                    <CarouselNext />
                  </>
                )}
              </Carousel>
              <p className="text-xs text-muted-foreground text-center mt-2">
                {vulnerability.pocSteps.length} step{vulnerability.pocSteps.length !== 1 ? 's' : ''} to reproduce
              </p>
            </div>
          )}

          {/* Remediation */}
          <div>
            <h3 className="mb-2">Remediation</h3>
            <div className="p-4 bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg">
              <p className="text-muted-foreground">{vulnerability.remediation}</p>
            </div>
          </div>

          {/* Resolved Date */}
          {vulnerability.resolvedDate && (
            <div>
              <h3 className="mb-2">Resolved Date</h3>
              <p className="text-muted-foreground">
                {format(vulnerability.resolvedDate, 'MMM dd, yyyy')}
              </p>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
