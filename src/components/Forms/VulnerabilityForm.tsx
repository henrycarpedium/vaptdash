import { useEffect, useState } from 'react';
import { useForm } from 'react-hook-form@7.55.0';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '../ui/dialog';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Textarea } from '../ui/textarea';
import { Label } from '../ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Badge } from '../ui/badge';
import { Vulnerability, VulnerabilityStatus, PoCStep } from '../../types';
import { getSeverityFromCVSS, useVaptStore } from '../../store/useVaptStore';
import { getSeverityColor } from '../../utils/severity';
import { PoCStepsBuilder } from './PoCStepsBuilder';
import { toast } from 'sonner@2.0.3';

const vulnerabilitySchema = z.object({
  name: z.string().min(1, 'Name is required').max(200, 'Name is too long'),
  description: z.string().min(10, 'Description must be at least 10 characters'),
  impact: z.string().min(10, 'Impact description must be at least 10 characters'),
  targetUrl: z.string().url('Must be a valid URL'),
  cvssScore: z.number().min(0, 'CVSS must be at least 0').max(10, 'CVSS cannot exceed 10'),
  status: z.enum(['Open', 'In Progress', 'Resolved']),
  remediation: z.string().min(10, 'Remediation must be at least 10 characters'),
});

type VulnerabilityFormData = z.infer<typeof vulnerabilitySchema>;

interface VulnerabilityFormProps {
  vulnerability: Vulnerability | null;
  open: boolean;
  onClose: () => void;
}

export function VulnerabilityForm({ vulnerability, open, onClose }: VulnerabilityFormProps) {
  const { addVulnerability, updateVulnerability, filters, companies } = useVaptStore();
  const [pocSteps, setPocSteps] = useState<PoCStep[]>([]);
  const [cvssScore, setCvssScore] = useState<number>(0);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    setValue,
    watch,
  } = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: {
      name: '',
      description: '',
      impact: '',
      targetUrl: '',
      cvssScore: 0,
      status: 'Open',
      remediation: '',
    },
  });

  const watchedCvss = watch('cvssScore');

  useEffect(() => {
    if (vulnerability) {
      reset({
        name: vulnerability.name,
        description: vulnerability.description,
        impact: vulnerability.impact,
        targetUrl: vulnerability.targetUrl,
        cvssScore: vulnerability.cvssScore,
        status: vulnerability.status,
        remediation: vulnerability.remediation,
      });
      setPocSteps(vulnerability.pocSteps);
      setCvssScore(vulnerability.cvssScore);
    } else {
      reset({
        name: '',
        description: '',
        impact: '',
        targetUrl: '',
        cvssScore: 0,
        status: 'Open',
        remediation: '',
      });
      setPocSteps([]);
      setCvssScore(0);
    }
  }, [vulnerability, reset]);

  useEffect(() => {
    setCvssScore(watchedCvss || 0);
  }, [watchedCvss]);

  const onSubmit = (data: VulnerabilityFormData) => {
    const severity = getSeverityFromCVSS(data.cvssScore);

    if (vulnerability) {
      // Update existing
      updateVulnerability(vulnerability.id, {
        ...data,
        severity,
        pocSteps,
      });
      toast.success('Vulnerability updated successfully');
    } else {
      // Create new - ensure we have a company ID
      if (!filters.companyId) {
        toast.error('Please select a company first');
        return;
      }

      const newVulnerability: Vulnerability = {
        id: `vuln-${Date.now()}`,
        companyId: filters.companyId,
        ...data,
        severity,
        pocSteps,
        discoveredDate: new Date(),
        resolvedDate: data.status === 'Resolved' ? new Date() : undefined,
      };
      addVulnerability(newVulnerability);
      toast.success('Vulnerability created successfully');
    }

    onClose();
  };

  const currentSeverity = getSeverityFromCVSS(cvssScore);

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {vulnerability ? 'Edit Vulnerability' : 'Add New Vulnerability'}
          </DialogTitle>
          <DialogDescription>
            {vulnerability 
              ? 'Update the vulnerability details below.' 
              : 'Fill in the details to add a new vulnerability to the system.'}
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
          {/* Name */}
          <div>
            <Label htmlFor="name">Vulnerability Name *</Label>
            <Input
              id="name"
              {...register('name')}
              placeholder="e.g., SQL Injection in Login Form"
            />
            {errors.name && (
              <p className="text-sm text-destructive mt-1">{errors.name.message}</p>
            )}
          </div>

          {/* Description */}
          <div>
            <Label htmlFor="description">Description *</Label>
            <Textarea
              id="description"
              {...register('description')}
              placeholder="Detailed description of the vulnerability..."
              rows={4}
            />
            {errors.description && (
              <p className="text-sm text-destructive mt-1">{errors.description.message}</p>
            )}
          </div>

          {/* Impact */}
          <div>
            <Label htmlFor="impact">Impact *</Label>
            <Textarea
              id="impact"
              {...register('impact')}
              placeholder="Describe the potential impact of this vulnerability..."
              rows={3}
            />
            {errors.impact && (
              <p className="text-sm text-destructive mt-1">{errors.impact.message}</p>
            )}
          </div>

          {/* Target URL */}
          <div>
            <Label htmlFor="targetUrl">Target URL *</Label>
            <Input
              id="targetUrl"
              {...register('targetUrl')}
              placeholder="https://example.com/vulnerable-page"
            />
            {errors.targetUrl && (
              <p className="text-sm text-destructive mt-1">{errors.targetUrl.message}</p>
            )}
          </div>

          {/* CVSS Score with Severity Badge */}
          <div>
            <Label htmlFor="cvssScore">CVSS Score (0.0 - 10.0) *</Label>
            <div className="flex gap-4 items-center">
              <Input
                id="cvssScore"
                type="number"
                step="0.1"
                min="0"
                max="10"
                {...register('cvssScore', { valueAsNumber: true })}
                className="max-w-xs"
              />
              <Badge className={getSeverityColor(currentSeverity)}>
                {currentSeverity}
              </Badge>
            </div>
            {errors.cvssScore && (
              <p className="text-sm text-destructive mt-1">{errors.cvssScore.message}</p>
            )}
          </div>

          {/* Status */}
          <div>
            <Label htmlFor="status">Status *</Label>
            <Select
              defaultValue={vulnerability?.status || 'Open'}
              onValueChange={(value) => setValue('status', value as VulnerabilityStatus)}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Open">Open</SelectItem>
                <SelectItem value="In Progress">In Progress</SelectItem>
                <SelectItem value="Resolved">Resolved</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* PoC Steps */}
          <div>
            <Label>Proof of Concept Steps</Label>
            <PoCStepsBuilder steps={pocSteps} onChange={setPocSteps} />
          </div>

          {/* Remediation */}
          <div>
            <Label htmlFor="remediation">Remediation *</Label>
            <Textarea
              id="remediation"
              {...register('remediation')}
              placeholder="Recommended fixes and best practices..."
              rows={4}
            />
            {errors.remediation && (
              <p className="text-sm text-destructive mt-1">{errors.remediation.message}</p>
            )}
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button type="submit">
              {vulnerability ? 'Update' : 'Create'} Vulnerability
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
